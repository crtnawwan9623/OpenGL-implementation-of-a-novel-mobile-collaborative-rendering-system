// Include standard headers
#include <iostream>
#include <stdio.h>
#include <stdlib.h>

// Include GLEW
#include <GL/glew.h>



// glm::vec3, glm::vec4, glm::ivec4, glm::mat4
#include <glm/glm.hpp>
// glm::translate, glm::rotate, glm::scale, glm::perspective
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/matrix_inverse.hpp>


#include <GL/freeglut.h>
#include <GL/freeglut_ext.h>

#include "shader.h"
#include "libobj.h"


GLMmodel* objModel;

GLuint programID;
GLuint modelID;
GLuint viewID;
GLuint projectionID;

glm::mat4 model;
glm::mat4 view;
glm::mat4 projection;

GLuint vertexbuffer;
GLuint normalbuffer;

// Rotation interface
float xrot = 0;
float yrot = 0;
float xdiff = 0;
float ydiff = 0;
bool mouseDown = false;
const int BMP_Header_Length=54;

void saveFrameBuff(const char* fileName,int width, int height);

void mouseMotionCB(int x, int y)
{
  if (mouseDown)
    {
      yrot = x - xdiff;
      xrot = y + ydiff;
      glutPostRedisplay();
    }
}

void mouseCB(int button, int state, int x, int y)
{
  switch(button){
  case GLUT_LEFT_BUTTON:
    switch(state)
      {
      case GLUT_DOWN:
	mouseDown = true;
	xdiff = x - yrot;
	ydiff = -y + xrot;
	break;
      case GLUT_UP:
	mouseDown = false;
	break;
      default:
	break;
      }
    break;    
  case GLUT_MIDDLE_BUTTON:
    break;
  default:
    break;
  }
}

void display(void)

{

  // Clear the screne
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);


  model = glm::mat4(1.0f);
  glm::mat4 xRotMat = glm::rotate(glm::mat4(1.0f), xrot, glm::normalize(glm::vec3(glm::inverse(model) * glm::vec4(1, 0, 0, 1))) );
  model = model * xRotMat;
  glm::mat4 yRotMat = glm::rotate(glm::mat4(1.0f), yrot, glm::normalize(glm::vec3(glm::inverse(model) * glm::vec4(0, 1, 0, 1))) );
  model = model * yRotMat;

  glm::mat4 modelViewMatrix = view * model;
  glm::mat3 normalMatrix = glm::inverseTranspose(glm::mat3(modelViewMatrix)); // Normal Matrix

  // Use our shader
  glUseProgram(programID);
  // Send the model, view and projection matrices to the shader 
  glUniformMatrix4fv(modelID, 1, GL_FALSE, &model[0][0]);
  glUniformMatrix4fv(viewID, 1, GL_FALSE, &view[0][0]);
  glUniformMatrix4fv(projectionID, 1, GL_FALSE, &projection[0][0]);
  glUniformMatrix3fv( glGetUniformLocation(programID, "normalMatrix"), 1, GL_FALSE, &normalMatrix[0][0]);

  glmDrawVBO(objModel, programID);

  // Swap buffers
  glutSwapBuffers();
  saveFrameBuff("real-time-grab1.bmp",640,480);
}

void init(char* fname)
{

  objModel = glmReadOBJ(fname);
  if (!objModel) exit(0);


  // Normilize vertices
  glmUnitize(objModel);
  // Compute facet normals
  glmFacetNormals(objModel);
  // Comput vertex normals
  glmVertexNormals(objModel, 90.0);
  // Load the model (vertices and normals) into a vertex buffer
  glmLoadInVBO(objModel);

  // Black background
  glClearColor(0.0f, 0.0f, 0.0f, 0.0f);

  // Enable depth test
  glEnable(GL_DEPTH_TEST);
  // Accept fragment if it closer to the camera than the former one
  glDepthFunc(GL_LESS); 

  // TODO: Make sure that this is trully unnecessary
  //GLuint VertexArrayID;
  //glGenVertexArrays(1, &VertexArrayID);
  //glBindVertexArray(VertexArrayID);

  // Create and compile our GLSL program from the shaders
  programID = LoadShaders( "shaders/vertShader.glsl", "shaders/fragShader.glsl" );

  // Get a handle for our model, view and projection uniforms
  modelID = glGetUniformLocation(programID, "model");
  viewID = glGetUniformLocation(programID, "view");
  projectionID = glGetUniformLocation(programID, "projection");

  glm::vec4 light_ambient = glm::vec4( 0.1, 0.1, 0.1, 0.5 );
  glm::vec4 light_diffuse = glm::vec4 ( 0.8, 1.0, 1.0, 1.0 );
  glm::vec4 light_specular =glm::vec4( 0.8, 1.0, 1.0, 1.0 );

  glUseProgram(programID);
  glUniform4fv( glGetUniformLocation(programID, "light_ambient"),1,&light_ambient[0]);
  glUniform4fv( glGetUniformLocation(programID, "light_diffuse"),1, &light_diffuse[0]);
  glUniform4fv( glGetUniformLocation(programID, "light_specular"),1, &light_specular[0]);      

  // Projection matrix : 45° Field of View, 4:3 ratio, display range : 0.1 unit <-> 100 units
  projection = glm::perspective(45.0f, 4.0f / 3.0f, 0.1f, 100.0f);
  // Camera matrix
  view = glm::lookAt( glm::vec3(0,0,3), // Camera position in World Space
		      glm::vec3(0,0,0), // and looks at the origin
		      glm::vec3(0,1,0)  // Head is up (set to 0,-1,0 to look upside-down)
		      );
  // Model matrix : an identity matrix (model will be at the origin)
  model      = glm::mat4(1.0f);

  // Initialize a light
  glm::vec4 lightPosition = glm::vec4(-20, -10, 0, 0);
  glUniform4fv( glGetUniformLocation(programID, "lightPos"),1, &lightPosition[0]); 

}


// Get OpenGL version information
void getGLinfo()
{
  std::cout << "GL Vendor   : " << glGetString(GL_VENDOR) << std::endl;
  std::cout << "GL Renderer : " << glGetString(GL_RENDERER) << std::endl;
  std::cout << "GL Version  : " << glGetString(GL_VERSION) << std::endl;
}
void reshape( int width, int height )
{
  glViewport(0, 0, width, height);
  GLfloat aspectRatio = GLfloat(width)/height;
  projection = glm::perspective(45.0f, aspectRatio, 0.1f, 100.0f);
  glutPostRedisplay();
}
int main(  int argc, char **argv  )
{

  // TODO: Command-line parsing and error checking
  char* fname;
  if (argc == 2)
    {
      fname = argv[1];
    }
  else
    {
      std::cerr << "You have to specify an OBJ file as argument." << std::endl;
      return 1;
    }

  glutInit( &argc, argv );
  glutInitDisplayMode( GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH );
  glutInitWindowSize( 640, 480 );

  glutCreateWindow( "objview" );
  glewInit();
  getGLinfo();
  init(fname);
  glutDisplayFunc( display );
  glutReshapeFunc( reshape );
  glutMouseFunc(mouseCB);
  glutMotionFunc(mouseMotionCB);
  glutMainLoop();
  return 0;
}


void saveFrameBuff(const char* fileName,int width, int height)
{
    FILE* pDummyFile;
    FILE* pWritingFile;
    GLubyte* pPixelData;
    GLubyte BMP_Header[BMP_Header_Length];
    GLint i, j;
    GLint PixelDataLength;

    // 因为是窗口渲染，此处设置读取的数据来源于“前端窗口”（也可以是后端，详细见http://blog.csdn.net/hust_sheng/article/details/75268410）
    //glReadBuffer(GL_BACK);
    glReadBuffer(GL_FRONT);

    // 计算像素数据的实际长度
    // 默认是3通道
    i = width * 3;      // 得到每一行的像素数据长度
    while (i % 4 != 0)  // 补充数据，直到 i 是的倍数
        ++i;

    PixelDataLength = i * height;

    // 但这里仅追求直观，对速度没有太高要求PixelDataLength = i * WindowHeight;
    // 分配内存和打开文件
    pPixelData = (GLubyte*)malloc(PixelDataLength);
    if (pPixelData == 0)
        exit(0);

    pDummyFile = fopen("ground.bmp", "rb");
    if (pDummyFile == 0)
        exit(0);

    pWritingFile = fopen(fileName, "wb");
    if (pWritingFile == 0)
        exit(0);

    // 读取像素
    glPixelStorei(GL_UNPACK_ALIGNMENT, 4);
    glReadPixels(0, 0, width, height, GL_BGR_EXT, GL_UNSIGNED_BYTE, pPixelData);

    // 把 dummy.bmp 的文件头复制为新文件的文件头
    fread(BMP_Header, sizeof(BMP_Header), 1, pDummyFile);
    fwrite(BMP_Header, sizeof(BMP_Header), 1, pWritingFile);
    fseek(pWritingFile, 0x0012, SEEK_SET);
    i = width;
    j = height;
    fwrite(&i, sizeof(i), 1, pWritingFile);
    fwrite(&j, sizeof(j), 1, pWritingFile);

    // 写入像素数据
    fseek(pWritingFile, 0, SEEK_END);
    fwrite(pPixelData, PixelDataLength, 1, pWritingFile);

    // 释放内存和关闭文件
    fclose(pDummyFile);
    fclose(pWritingFile);
    free(pPixelData);
}
